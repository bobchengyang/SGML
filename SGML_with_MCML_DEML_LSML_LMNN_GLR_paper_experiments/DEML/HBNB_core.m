function [M] = ...
    HBNB_core(...
    partial_sample,...
    n_feature,...
    M,...
    D,...
    S_upper,...
    tol_main,...
    tol_diagonal,...
    tol_offdiagonal,...
    length_D)

initial_objective = dml_obj(M,D);
disp(['inintial wei = ' num2str(initial_objective)]);

counter_diag_nondiag = 0;

tol_diag_nondiag = Inf;

lr=.1/partial_sample;
nc=0;

dia_idx=find(M==diag(M));

lower_bounds=M;
lower_bounds(dia_idx)=0;
lower_bounds=sum(abs(lower_bounds),2);
flag=0;
lobpcg_random_control=0;
while tol_diag_nondiag > tol_main
    
    %disp('dia');
    [ M,lr ] = optimization_M_Block_CDdia_corrected(...
        D,...
        n_feature,...
        M,...
        lr,...
        S_upper,...
        tol_diagonal,...
        lower_bounds,...
        length_D,...
        dia_idx);
    
    
    for BCD = 1:n_feature
        %disp(['offdia: ' num2str(BCD)]);
        remaining_idx=1:n_feature;
        remaining_idx(BCD)=[];
        m11=M(BCD,BCD);
        M12=M(BCD,remaining_idx);
        M22=M(remaining_idx,remaining_idx);
        M21 = M12';
        
if n_feature==2
    M22_min_eig=M22;
else
    if flag==0
        flag=1;
        rng(lobpcg_random_control);
        [mce,~] = ...
            optimization_M_lobpcg(randn(n_feature-1,1),M22,1e-4,200);
    else
        [mce,~] = ...
            optimization_M_lobpcg(mce,M22,1e-4,200);
    end
    M22_min_eig=mce'*M22*mce;
end

        
        [ M,lr,lower_bounds ] = optimization_M_Block_CD(...
            n_feature,...
            D,...
            lr,...
            m11,...
            M21,...
            M22_min_eig,...
            M,...
            BCD,...
            tol_offdiagonal,...
            remaining_idx,...
            lower_bounds,...
            length_D,...
            dia_idx);
        
    end
    
    counter_diag_nondiag = counter_diag_nondiag + 1;
    
    current_objective = dml_obj(M,D);
    
    tol_diag_nondiag = norm(current_objective - initial_objective);
    
    initial_objective = current_objective;
    
    if counter_diag_nondiag>1e3 % not converged
        nc=1;
        break
    end
    
end

if nc==1
    disp(['NOT converged wei = ' num2str(current_objective)]);
else
    disp(['converged wei = ' num2str(current_objective)]);
end
min(eig(M))
end