function [ M, scaled_M, scaled_factors, M_current_eigenvector,...
    league_vec,...
    bins,...
    time_lp,...
    time_gs,...
    time_grad,...
    time_sf,...
    time_ds,...
    num_list] = ...
    optimization_M_Block_CDLPt_blue_red_MLjournal_subgraph_1sbb2f(partial_feature,...
    feature_N,...
    x_original,...
    M21,...
    M,...
    BCD,...
    scaled_factors,...
    scaled_M,...
    rho,...
    tol_offdiagonal,...
    M_current_eigenvector,...
    league_vec,...
    S_upper,...
    bins,...
    lobpcg_random_control,...
    tol_golden_search,...
    time_lp,...
    time_gs,...
    time_grad,...
    time_sf,...
    time_ds,...
    time_i,...
    nv,...
    zz,...
    c,...
    y,...
    partial_sample,...
    num_list)

[ L ] = optimization_M_set_L_Mahalanobis( partial_sample, c, M );

objective_previous = x_original' * L * x_original;

remaining_idx=1:feature_N;
remaining_idx(BCD)=[];

Ms_off_diagonal = scaled_M(remaining_idx,remaining_idx);
scaled_factors_v = scaled_factors(remaining_idx,BCD);
scaled_factors_h = scaled_factors(BCD,remaining_idx);

Ms_off_diagonal(logical(eye(feature_N-1))) = 0;
tic;
[ G ] = optimization_M_set_gradient( partial_sample, feature_N, c, M, y, nv, BCD);
time_grad(time_i)=time_grad(time_i)+toc;

%% try BLUE league on NODE BCD
league_vec_temp = league_vec;
league_vec_temp(BCD) = 1; % BLUE is 1
league_vec_remaining = league_vec_temp;
league_vec_remaining(BCD) = [];

[M_blue,...
    scaled_M_blue,...
    scaled_factors_blue,...
    M_current_eigenvector_blue,...
    min_obj_blue,...
    bins_blue,...
    invalid_result_blue,...
    time_lp,...
    time_gs,...
    time_grad,...
    time_sf,...
    time_ds,...
    num_list_blue] = optimization_M_Block_ns_cell_MLjournal_subgraph_gs_ws(1,league_vec,league_vec_temp,league_vec_remaining,...
    Ms_off_diagonal,...
    scaled_factors_v,...
    scaled_factors_h,...
    feature_N,...
    G,...
    M21,...
    M,...
    BCD,...
    M_current_eigenvector,...
    partial_feature,...
    x_original,...
    rho,...
    S_upper,...
    scaled_M,...
    scaled_factors,...
    bins,...
    objective_previous,...
    lobpcg_random_control,...
    tol_golden_search,...
    time_lp,...
    time_gs,...
    time_grad,...
    time_sf,...
    time_ds,...
    time_i,...
    nv,...
    zz,...
    c,...
    y,...
    partial_sample,...
    num_list);

%% try RED league on NODE BCD
league_vec_temp = league_vec;
league_vec_temp(BCD) = -1; % RED is -1
league_vec_remaining = league_vec_temp;
league_vec_remaining(BCD) = [];

[M_red,...
    scaled_M_red,...
    scaled_factors_red,...
    M_current_eigenvector_red,...
    min_obj_red,...
    bins_red,...
    invalid_result_red,...
    time_lp,...
    time_gs,...
    time_grad,...
    time_sf,...
    time_ds,...
    num_list_red] = optimization_M_Block_ns_cell_MLjournal_subgraph_gs_ws(-1,league_vec,league_vec_temp,league_vec_remaining,...
    Ms_off_diagonal,...
    scaled_factors_v,...
    scaled_factors_h,...
    feature_N,...
    G,...
    M21,...
    M,...
    BCD,...
    M_current_eigenvector,...
    partial_feature,...
    x_original,...
    rho,...
    S_upper,...
    scaled_M,...
    scaled_factors,...
    bins,...
    objective_previous,...
    lobpcg_random_control,...
    tol_golden_search,...
    time_lp,...
    time_gs,...
    time_grad,...
    time_sf,...
    time_ds,...
    time_i,...
    nv,...
    zz,...
    c,...
    y,...
    partial_sample,...
    num_list);

if min_obj_red < min_obj_blue
    M = M_red;
    scaled_M = scaled_M_red;
    scaled_factors = scaled_factors_red;
    M_current_eigenvector = M_current_eigenvector_red;
    league_vec(BCD) = -1;
    bins = bins_red;
    num_list=num_list_red;
elseif min_obj_red > min_obj_blue
    M = M_blue;
    scaled_M = scaled_M_blue;
    scaled_factors = scaled_factors_blue;
    M_current_eigenvector = M_current_eigenvector_blue;
    league_vec(BCD) = 1;
    bins = bins_blue;
    num_list=num_list_blue;
else
    league_vec_temp=league_vec;
    league_vec_temp(BCD)=-1;
    if isequal(league_vec_temp,league_vec)==1
        M = M_red;
        scaled_M = scaled_M_red;
        scaled_factors = scaled_factors_red;
        M_current_eigenvector = M_current_eigenvector_red;
        league_vec(BCD) = -1;
        bins = bins_red;
        num_list=num_list_red;
    else
        M = M_blue;
        scaled_M = scaled_M_blue;
        scaled_factors = scaled_factors_blue;
        M_current_eigenvector = M_current_eigenvector_blue;
        league_vec(BCD) = 1;
        bins = bins_blue;
        num_list=num_list_blue;
    end
end

end




