function [ M, scaled_M, scaled_factors,...
    league_vec,...
    bins] = ...
    optimization_M_Block_CDLPt_blue_red_MLjournal_subgraph_c(partial_feature,...
    feature_N,...
    m11,...
    x_original,...
    M21,...
    M,...
    BCD,...
    scaled_factors,...
    scaled_M,...
    rho,...
    tol_offdiagonal,...
    league_vec,...
    bins,...
    lobpcg_random_control,...
    tol_golden_search)

% BCD

tol = 1e4;

counter = 0;

[ L ] = optimization_M_set_L_Mahalanobis( partial_feature, M );

objective_previous = x_original' * L * x_original;

while tol > tol_offdiagonal
    
    if BCD == 1
        
        Ms_off_diagonal = scaled_M(2:end,2:end);
        
        scaled_factors_v = scaled_factors(2:end,1);
        scaled_factors_h = scaled_factors(1,2:end);
        
    elseif BCD == feature_N
        
        Ms_off_diagonal = scaled_M(1:end-1,1:end-1);
        
        scaled_factors_v = scaled_factors(1:end-1,end);
        scaled_factors_h = scaled_factors(end,1:end-1);
        
    else
        
        Ms_off_diagonal = scaled_M([1:BCD-1 BCD+1:end],[1:BCD-1 BCD+1:end]);
        scaled_factors_v = scaled_factors([1:BCD-1 BCD+1:end],BCD);
        scaled_factors_h = scaled_factors(BCD,[1:BCD-1 BCD+1:end]);
        
    end
    
    Ms_off_diagonal(logical(eye(feature_N-1))) = 0;
    
    Ms_diagonal = diag(Ms_off_diagonal);
    
    [ G ] = optimization_M_set_gradient( partial_feature, M, x_original);
    
    %% try BLUE league on NODE BCD
    league_vec_temp = league_vec;
    league_vec_temp(BCD) = 1; % BLUE is 1
    league_vec_remaining = league_vec_temp;
    league_vec_remaining(BCD) = [];
    
    [M_blue,...
        scaled_M_blue,...
        scaled_factors_blue,...
        min_obj_blue,...
        bins_blue] = optimization_M_Block_CDLPt_updated_ns_cell_MLjournal_subgraph(1,league_vec,league_vec_temp,league_vec_remaining,...
        Ms_diagonal,...
        Ms_off_diagonal,...
        scaled_factors_v,...
        scaled_factors_h,...
        feature_N,...
        G,...
        M21,...
        m11,...
        M,...
        BCD,...
        x_original,...
        rho,...
        lobpcg_random_control,...
        tol_golden_search,...
        partial_feature,...
        objective_previous,...
        scaled_M,...
        scaled_factors,...
        bins);
    
    %% try RED league on NODE BCD
    league_vec_temp = league_vec;
    league_vec_temp(BCD) = -1; % RED is -1
    league_vec_remaining = league_vec_temp;
    league_vec_remaining(BCD) = [];
    
    [M_red,...
        scaled_M_red,...
        scaled_factors_red,...
        min_obj_red,...
        bins_red] = optimization_M_Block_CDLPt_updated_ns_cell_MLjournal_subgraph(-1,league_vec,league_vec_temp,league_vec_remaining,...
        Ms_diagonal,...
        Ms_off_diagonal,...
        scaled_factors_v,...
        scaled_factors_h,...
        feature_N,...
        G,...
        M21,...
        m11,...
        M,...
        BCD,...
        x_original,...
        rho,...
        lobpcg_random_control,...
        tol_golden_search,...
        partial_feature,...
        objective_previous,...
        scaled_M,...
        scaled_factors,...
        bins);
    
    if min_obj_red < min_obj_blue && min_obj_red <= objective_previous
        M = M_red;
        scaled_M = scaled_M_red;
        scaled_factors = scaled_factors_red;
        league_vec(BCD) = -1;
        bins = bins_red;
    end
    if min_obj_red >= min_obj_blue && min_obj_blue <= objective_previous
        M = M_blue;
        scaled_M = scaled_M_blue;
        scaled_factors = scaled_factors_blue;
        league_vec(BCD) = 1;
        bins = bins_blue;
    end
    
    [ L ] = optimization_M_set_L_Mahalanobis( partial_feature, M );
    objective_current = x_original' * L * x_original;
    tol = norm(objective_current - objective_previous);
    
    %disp(['obj offdia = ' num2str(objective_current)]);
    
    counter = counter + 1;
    objective_previous = objective_current;
    
end

end




